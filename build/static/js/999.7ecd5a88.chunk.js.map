{"version":3,"file":"static/js/999.7ecd5a88.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/AboutHeader/AboutHeaderPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect,  useState} from 'react';\nimport {Button, Col, Form,  message,  Row,  Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport ImgCrop from \"antd-img-crop\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\nconst initialValueForm = {\n    image:[],\n    title_ru:\"\",\n    title_uz:\"\",\n    title_en:\"\",\n};\n\n\n\n\nconst AboutHeaderPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n    const [fileListProps, setFileListProps] = useState([])\n\n\n\n\n\n    // query-about-header\n    const {\n        mutate: postAboutHeaderMutate,\n        data: postAboutHeader,\n        isLoading: postAboutHeaderLoading,\n        isSuccess: postAboutHeaderSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editAboutHeaderLoading,\n        data: editAboutHeaderData,\n        refetch: editAboutHeaderRefetch,\n        isSuccess: editAboutHeaderSuccess,\n    } = useQuery([\"edit-about-header\", editId], () => apiService.getDataByID(\"/pages/about/header\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putAboutHeader,\n        isLoading: putAboutHeaderLoading,\n        data: putData,\n        isSuccess: putAboutHeaderSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // about-header success\n    useEffect(() => {\n        if (putAboutHeaderSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postAboutHeaderSuccess || putAboutHeaderSuccess) {\n\n            navigate('/about-header')\n        }\n    }, [postAboutHeader, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editAboutHeaderRefetch();\n        }\n    }, [editId]);\n\n    // if no edit about-header\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit about-header\n    useEffect(() => {\n        if (editAboutHeaderSuccess) {\n\n            const image=[{\n                uid: editAboutHeaderData.id,\n                name: editAboutHeaderData.id,\n                status: \"done\",\n                url: editAboutHeaderData.image\n            }];\n\n\n            const edit = {\n                image,\n                title_ru:editAboutHeaderData.title_ru,\n                title_uz:editAboutHeaderData.title_uz,\n                title_en:editAboutHeaderData.title_en,\n            }\n\n\n            console.log(edit)\n            setFileListProps(image)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editAboutHeaderData])\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_ru', values.title_ru);\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_en', values.title_en);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n\n        if (editAboutHeaderData) {\n            putAboutHeader({url: '/pages/about/header', data: formData, id: editId})\n        } else {\n            postAboutHeaderMutate({url: \"/pages/about/header/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChangeImage = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n    return (\n        <div>\n            {(postAboutHeaderLoading || editAboutHeaderLoading || putAboutHeaderLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={8}>\n                            <FormInput\n                                required={true}\n                                required_text={'Необходимо ввести заголовок'}\n                                label={'Title Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                        <Col span={8}>\n                            <FormInput\n                                required={true}\n                                required_text={'Sarlavha kiritish kerak'}\n                                label={'Title Uz'}\n                                name={'title_uz'}\n                            />\n\n                        </Col>\n                        <Col span={8}>\n                            <FormInput\n                                required={true}\n                                required_text={'A title must be entered'}\n                                label={'Title En'}\n                                name={'title_en'}\n                            />\n\n                        </Col>\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение баннера'\n                                name={'image'}\n                                rules={[{required: true, message: 'Требуется изображение баннера.'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListProps}\n                                        listType='picture-card'\n                                        onChange={onChangeImage}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n\n                    </Row>\n\n\n\n\n\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editAboutHeaderSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default AboutHeaderPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","image","title_ru","title_uz","title_en","AboutHeaderPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postAboutHeaderMutate","data","postAboutHeader","isLoading","postAboutHeaderLoading","isSuccess","postAboutHeaderSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editAboutHeaderLoading","editAboutHeaderData","refetch","editAboutHeaderRefetch","editAboutHeaderSuccess","useQuery","getDataByID","enabled","putAboutHeader","putAboutHeaderLoading","putData","putAboutHeaderSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","status","edit","console","log","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}