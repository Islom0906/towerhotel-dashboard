{"version":3,"file":"static/js/605.aab77307.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/Service/ServicePostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\n\n\n\nconst initialValueForm = {\n    image_ids: [],\n    title_uz: \"\",\n    title_ru: \"\",\n    title_en: \"\",\n    description_ru: \"\",\n    description_uz: \"\",\n    description_en: \"\",\n\n};\n\n\nconst ServicePostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n\n\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n    // query-service\n    const {\n        mutate: postServiceMutate,\n        data: postService,\n        isLoading: postServiceLoading,\n        isSuccess: postServiceSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editServiceLoading,\n        data: editServiceData,\n        refetch: editServiceRefetch,\n        isSuccess: editServiceSuccess,\n\n    } = useQuery([\"edit-service\", editId], () => apiService.getDataByID(\"/services\", editId), {\n        enabled: false\n    });\n\n\n    // put-query\n    const {\n        mutate: putService,\n        isLoading: putServiceLoading,\n        data: putData,\n        isSuccess: putServiceSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // delete image\n\n    const {mutate: imagesDeleteMutate} = useMutation(({url, ids}) => apiService.deleteImages(url, ids), {\n        onSuccess: () => message.success('Success'),\n        onError: (error) => message.error(error.message)\n    });\n\n    //                                              =====useEffect====\n\n    // service success\n    useEffect(() => {\n        if (putServiceSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postServiceSuccess || putServiceSuccess) {\n            navigate('/service')\n        }\n    }, [postService, putData])\n\n    // if edit service\n    useEffect(() => {\n        if (editId !== \"\") {\n            editServiceRefetch();\n        }\n    }, [editId]);\n\n    // if no edit service\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit service\n    useEffect(() => {\n        const image_ids = [];\n        if (editServiceData !== undefined) {\n                console.log(editServiceData.images)\n            editServiceData.images.map(image => {\n                const data = {\n                    uid: image.id,\n                    name: image.id,\n                    status: \"done\",\n                    url: image.image\n                }\n                image_ids.push(data)\n            })\n\n        }\n\n        if (editServiceSuccess) {\n\n            const edit = {\n                title_uz: editServiceData?.title_uz,\n                title_ru: editServiceData?.title_ru,\n                title_en: editServiceData?.title_en,\n                description_ru: editServiceData?.description_ru,\n                description_uz: editServiceData?.description_uz,\n                description_en: editServiceData?.description_en,\n                image_ids,\n            }\n\n\n            setFileListProps(image_ids);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editServiceData])\n    const onFinish = (values) => {\n        const image_ids = []\n        fileListProps.map(image => {\n            console.log(image)\n            image_ids.push(image.uid)\n        })\n\n        console.log(image_ids)\n        const data = {\n            image_ids,\n            title_uz: values.title_uz,\n            title_ru: values.title_ru,\n            title_en: values.title_en,\n            description_ru: values.description_ru,\n            description_uz: values.description_uz,\n            description_en: values.description_en,\n\n        };\n        if (editServiceSuccess) {\n\n            putService({url: \"/services\", data, id: editId});\n        } else {\n            postServiceMutate({url: \"/services/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // image\n    useEffect(() => {\n        if (imagesUploadSuccess) {\n            const initialImage = [...fileListProps]\n            const uploadImg = {\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }\n            initialImage.push(uploadImg)\n            form.setFieldsValue({image_ids: [uploadImg]});\n            setFileListProps(initialImage);\n        }\n    }, [imagesUpload]);\n\n    const onChangeImage = ({fileList: newFileList}) => {\n        if (newFileList.length < fileListProps.length) {\n            return\n        }\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[newFileList.length - 1].originFileObj);\n            imagesUploadMutate({url: \"/images/\", formData});\n        }\n\n    };\n\n    const handleRemoveImage = (file) => {\n        const withoutDeleteImage = []\n\n        fileListProps.map((image) => {\n            if (image?.uid !== file?.uid) {\n                withoutDeleteImage.push(image)\n            }\n        })\n        if (!withoutDeleteImage.length > 0) {\n            form.setFieldsValue({image_ids: []});\n        }\n        const ids = {\n            image_ids: [file?.uid]\n        }\n        imagesDeleteMutate({url: \"/images/delete\", ids});\n        setFileListProps(withoutDeleteImage)\n\n\n    }\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n\n\n\n\n\n    return (<div>\n        {(postServiceLoading || editServiceLoading || putServiceLoading || imagesUploadLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha kiritish kerak'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'A title is required'}\n                            label={'Title En'}\n                            name={'title_en'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Необходимо ввести описание'}\n                            label={'Описание Ru'}\n                            name={'description_ru'}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Tavsifi kiritish kerak'}\n                            label={'Tavsifi Uz'}\n                            name={'description_uz'}\n                        />\n                    </Col>\n                    <Col span={24}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'A description must be entered'}\n                            label={'Description En'}\n                            name={'description_en'}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение'\n                            name={'image_ids'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={4}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 3 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editServiceSuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default ServicePostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","TextArea","rows","initialValueForm","image_ids","title_uz","title_ru","title_en","description_ru","description_uz","description_en","ServicePostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","imagesUploadMutate","data","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","apiService","postData","onSuccess","success","onError","error","obj","response","concat","postServiceMutate","postService","postServiceLoading","postServiceSuccess","_ref2","editServiceLoading","editServiceData","refetch","editServiceRefetch","editServiceSuccess","useQuery","getDataByID","enabled","putService","putServiceLoading","putData","putServiceSuccess","_ref3","id","imagesDeleteMutate","_ref4","ids","deleteImages","useEffect","type","EDIT_DATA","payload","setFieldsValue","undefined","console","log","images","map","image","uid","status","push","edit","storedValues","JSON","parse","localStorage","getItem","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_imagesUpload$images$","_imagesUpload$images$2","_imagesUpload$images$3","initialImage","uploadImg","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","FormTextArea","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","length","FormData","append","originFileObj","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","onRemove","withoutDeleteImage","beforeUpload","Button","htmlType","width","marginTop"],"sourceRoot":""}