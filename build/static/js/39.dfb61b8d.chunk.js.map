{"version":3,"file":"static/js/39.dfb61b8d.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Gallery/GalleryPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\n\n\nconst initialValueForm = {\n    header_image_id:[],\n    image_ids: [],\n    title_uz: \"\",\n    title_ru: \"\",\n    title_en: \"\",\n\n};\n\n\nconst GalleryPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n    const [fileListPropsHeader, setFileListPropsHeaderImage] = useState([])\n    const [isUpload, setIsUpload] = useState('');\n\n\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n    // query-gallery\n    const {\n        mutate: postGalleryMutate,\n        data: postGallery,\n        isLoading: postGalleryLoading,\n        isSuccess: postGallerySuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editGalleryLoading,\n        data: editGalleryData,\n        refetch: editGalleryRefetch,\n        isSuccess: editGallerySuccess,\n\n    } = useQuery([\"edit-gallery\", editId], () => apiService.getDataByID(\"/pages/gallery\", editId), {\n        enabled: false\n    });\n\n\n    // put-query\n    const {\n        mutate: putGalleryPage,\n        isLoading: putGalleryPageLoading,\n        data: putData,\n        isSuccess: putGalleryPageSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // delete image\n\n    const {mutate: imagesDeleteMutate} = useMutation(({url, ids}) => apiService.deleteImages(url, ids), {\n        onSuccess: () => message.success('Success'),\n        onError: (error) => message.error(error.message)\n    });\n\n    //                                              =====useEffect====\n\n    // gallery success\n    useEffect(() => {\n        if (putGalleryPageSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postGallerySuccess || putGalleryPageSuccess) {\n            navigate('/gallery')\n        }\n    }, [postGallery, putData])\n\n    // if edit gallery\n    useEffect(() => {\n        if (editId !== \"\") {\n            editGalleryRefetch();\n        }\n    }, [editId]);\n\n    // if no edit gallery\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit gallery\n    useEffect(() => {\n        const image_ids = [];\n        let header_image_id=null\n        if (editGalleryData !== undefined) {\n            editGalleryData.images.map(image => {\n                const data = {\n                    uid: image.id,\n                    name: image.id,\n                    status: \"done\",\n                    url: image.image\n                }\n                image_ids.push(data)\n            })\n\n            header_image_id = [{\n                uid: editGalleryData?.header_image.id,\n                name: editGalleryData?.header_image.id,\n                status: \"done\",\n                url: editGalleryData?.header_image.image\n            }]\n\n        }\n\n        if (editGallerySuccess) {\n\n            const edit = {\n                title_uz: editGalleryData?.title_uz,\n                title_ru: editGalleryData?.title_ru,\n                title_en: editGalleryData?.title_en,\n                image_ids,\n                header_image_id\n            }\n\n\n            setFileListProps(image_ids);\n            setFileListPropsHeaderImage(header_image_id)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editGalleryData])\n    const onFinish = (values) => {\n        const image_ids = []\n\n        fileListProps.map(image => {\n            image_ids.push(image.uid)\n        })\n\n        const data = {\n            image_ids,\n            header_image_id:fileListPropsHeader[0]?.uid,\n            title_uz: values.title_uz,\n            title_ru: values.title_ru,\n            title_en: values.title_en,\n        };\n        if (editGallerySuccess) {\n\n            putGalleryPage({url: \"/pages/gallery\", data, id: editId});\n        } else {\n            postGalleryMutate({url: \"/pages/gallery/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n    // image\n    useEffect(() => {\n        // images\n        if (imagesUploadSuccess&&isUpload==='images') {\n            const initialImage = [...fileListProps]\n            const uploadImg = {\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }\n            initialImage.push(uploadImg)\n            form.setFieldsValue({image_ids: [uploadImg]});\n            setFileListProps(initialImage);\n            setIsUpload(\"\")\n        }\n         // header image\n        if (imagesUploadSuccess&& isUpload===\"headerImage\") {\n            const uploadImg = [{\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }]\n            form.setFieldsValue({header_image_id: uploadImg});\n            setFileListPropsHeaderImage(uploadImg);\n            setIsUpload(\"\")\n        }\n    }, [imagesUpload]);\n\n    const onChangeImage = ({fileList: newFileList}) => {\n        if (newFileList.length < fileListProps.length) {\n            return\n        }\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[newFileList.length - 1].originFileObj);\n            imagesUploadMutate({url: \"/images/\", formData});\n            setIsUpload(\"images\")\n        }\n\n    };\n\n\n\n    const handleRemoveImage = (file) => {\n        const withoutDeleteImage = []\n\n        fileListProps.map((image) => {\n            if (image?.uid !== file?.uid) {\n                withoutDeleteImage.push(image)\n            }\n        })\n        if (!withoutDeleteImage.length > 0) {\n            form.setFieldsValue({image_ids: []});\n        }\n        const ids = {\n            image_ids: [file?.uid]\n        }\n        imagesDeleteMutate({url: \"/images/delete\", ids});\n        setFileListProps(withoutDeleteImage)\n\n\n    }\n\n    // header image\n    const onChangeHeaderImage = ({fileList: newFileList}) => {\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[0].originFileObj);\n            imagesUploadMutate({url: \"/images/\", formData});\n            setIsUpload(\"headerImage\")\n        }\n\n    };\n\n    const handleRemoveHeaderImage = (file) => {\n        const ids = {\n            image_ids: [file?.uid]\n        }\n        imagesDeleteMutate({url: \"/images/delete\", ids});\n        setFileListPropsHeaderImage([])\n        form.setFieldsValue({header_image_id: []});\n\n    }\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n\n\n\n\n\n    return (<div>\n        {(postGalleryLoading || editGalleryLoading || putGalleryPageLoading || imagesUploadLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha kiritish kerak'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={24}>\n                        <FormInput\n                            required={true}\n                            required_text={'A title is required'}\n                            label={'Title En'}\n                            name={'title_en'}\n                        />\n\n                    </Col>\n                </Row>\n\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение'\n                            name={'image_ids'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={10}\n                                    fileList={fileListProps}\n                                    listType='picture-card'\n                                    onChange={onChangeImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListProps.length > 9 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Заглавное изображение'\n                            name={'header_image_id'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListPropsHeader}\n                                    listType='picture-card'\n                                    onChange={onChangeHeaderImage}\n                                    onPreview={onPreview}\n                                    onRemove={handleRemoveHeaderImage}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListPropsHeader.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n\n\n\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editGallerySuccess ? 'Изменить' : 'Создать'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default GalleryPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","header_image_id","image_ids","title_uz","title_ru","title_en","GalleryPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","fileListPropsHeader","setFileListPropsHeaderImage","isUpload","setIsUpload","mutate","imagesUploadMutate","data","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","apiService","postData","onSuccess","success","onError","error","obj","response","concat","postGalleryMutate","postGallery","postGalleryLoading","postGallerySuccess","_ref2","editGalleryLoading","editGalleryData","refetch","editGalleryRefetch","editGallerySuccess","useQuery","getDataByID","enabled","putGalleryPage","putGalleryPageLoading","putData","putGalleryPageSuccess","_ref3","id","imagesDeleteMutate","_ref4","ids","deleteImages","useEffect","type","EDIT_DATA","payload","setFieldsValue","undefined","images","map","image","uid","status","push","header_image","edit","storedValues","JSON","parse","localStorage","getItem","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_imagesUpload$images$","_imagesUpload$images$2","_imagesUpload$images$3","initialImage","uploadImg","_imagesUpload$images$4","_imagesUpload$images$5","_imagesUpload$images$6","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","Image","imgWindow","open","document","write","outerHTML","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListPropsHeader$","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","length","FormData","append","onRemove","withoutDeleteImage","beforeUpload","_ref6","Button","htmlType","width","marginTop"],"sourceRoot":""}